class User {
    constructor(username){
        this.username = username
    }
    /* ‡§è‡§ï method ‡§≠‡•Ä ‡§π‡•à ‡§á‡§∏‡§Æ‡•á‡§Ç logMe */
    // logMe ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à username ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à ‡§Ø‡•Ç‡§è‡§∏ username ‡§ï‡•Ä value set ‡§ï‡§∞‡§ï‡•á ‡§¶‡•á‡§§‡§æ ‡§π‡•à 
    // variable inject kardiya ‡§î‡§∞ class ke pass current context ka access hai kui ki this. puri class mai sabb jagah available hai hi 
    logMe(){ 
        console.log(`USERNAME IS ${this.username}`); 
        
    }
}// ‡§Ø‡•á ‡§§‡•ã ‡§π‡•ã‡§ó‡§Ø‡§æ Basic class ‡§¨‡§®‡§æ‡§®‡§æ 


// ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ü‡§™ ‡§á‡§∏ user ‡§ï‡•ã lms/owneer ‡§¨‡§®‡§æ‡§®‡§æ ‡§™‡§°‡§º‡•á‡§ó‡§æ ‡§ï‡§≠‡•Ä teacher ‡§ï‡§≠‡•Ä admin ‡§ï‡§≠‡•Ä student

/* ‡§µ‡§π‡§æ‡§Å ‡§™‡•á protype hua ‡§•‡§æ ‡§Ö‡§¨ extends, sugar ‡§≤‡§ó‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à */
class Teacher extends User{
    constructor(username, email, password){
        /* username ‡§ï‡•á ‡§≤‡§ø‡§è call ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º‡§§‡§æ ‡§•‡§æ üçë ‡§Ö‡§¨ class ‡§ï‡§æ syntax ‡§π‡•à */
        /* ‡§§‡•ã ‡§´‡§ø‡§∞ ‡§Ø‡•á super keyword reffer ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡•Ä ‡§≠‡§æ‡§à‡§∏‡§æ‡§π‡§¨ ‡§ï‡•å‡§®‡§∏‡•Ä class extend ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§•‡•á => user class ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§á‡§∏ constructer ‡§Æ‡•à‡§Ç ‡§ú‡§æ‡§§‡§æ ‡§π‡•Ç this automatically BTS ‡§≤‡•á‡§ú‡§æ‡§ä‡§Å‡§ó‡§æ ‡§â‡§∏ username ‡§ï‡•Ä value set ‡§ï‡§∞‡§¶‡•Ç‡§Å‡§ó‡§æ, ‡§â‡§∏ username ‡§ï‡•Ä value ‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ ‡§π‡•ã‡§ú‡§æ‡§è‡§ó‡•Ä, ‡§î‡§∞ ‡§Ü‡§™ ‡§â‡§∏‡§ï‡§æ acces directly ‡§≠‡•Ä ‡§≤‡•á ‡§™‡§æ‡§ì‡§ó‡•á */
        super(username) 
        this.email = email
        this.password = password
    }
    addCourse (){
        console.log(`A new course was added by ${this.username}`);
        
    }
}

const chai = new Teacher("chai", "chai@gmail.com", "123")
// chai.addCourse()
chai.logMe()

const masalaChai = new User("masalaChai")
masalaChai.logMe()

console.log(chai instanceof Teacher);
